name: Kernel Module CI

on: [push, pull_request]

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    container:
      image: ubuntu:22.04
      options: --privileged  # Required for kernel module operations

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup environment
      run: |
        # Install dependencies
        apt-get update
        apt-get install -y --no-install-recommends \
          build-essential \
          libelf-dev \
          kmod \
          git \
          qemu-system-x86 \
          gcc-aarch64-linux-gnu \
          libc6-dev-arm64-cross \
          linux-compiler-gcc-12-x86 \
          linux-kbuild-6.1

          echo "[*] downloading necessary headers..."
          wget -q https://debian.sipwise.com/debian-security/pool/main/l/linux/linux-headers-6.1.0-21-common_6.1.90-1_all.deb
          wget -q https://debian.sipwise.com/debian-security/pool/main/l/linux/linux-headers-6.1.0-21-amd64_6.1.90-1_amd64.deb

          dpkg -i *.deb || true
          apt-get install linux-headers-6.1.0-21-amd64 linux-headers-6.1.0-21-common -y 
          apt-get install linux-headers-6.1.0-21-image -y
          apt-get build-dep linux-headers-6.1.0-21-amd64 linux-headers-6.1.0-21-common -y
          apt-get build-dep linux-headers-6.1.0-21-image -y
          echo "[*] installing any missing packages..."
          apt install -f -y >/dev/null
          apt-get --fix-broken install
          
        # Verify kernel headers
        if [ ! -d "/lib/modules/*/build" ]; then
          echo "❌ Kernel headers not found for $(uname -r)"
          exit 1
        fi

    - name: Build module
      run: |
        make

    - name: Run smoke tests
      run: |
        # Simple module load/unload test
        insmod your_module.ko
        dmesg | grep "kvm_probe_drv:"
        rmmod kvm_probe_drv.ko
        
        # Verify error logs are captured
        if dmesg | grep -q "your_module:.*ERR"; then
          echo "❌ Error logs detected in dmesg"
          exit 1
        fi

    - name: Cross-compile for ARM64
      run: |
        make ARCH=arm64 CROSS_COMPILE=aarch64-linux-gnu- \
          -C /lib/modules/$(uname -r)/build M=$PWD modules
        file your_module.ko

    - name: Archive debug artifacts
      if: ${{ failure() }}
      run: |
        dmesg > dmesg.log
        cat dmesg.log
